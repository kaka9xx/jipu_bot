// src/features/deleteUser.js
const fs = require("fs");
const csv = require("csv-parser");
const { Parser } = require("json2csv");
const fetch = require("node-fetch");
const { deleteById, getAllUsers, getUserById } = require("../services/userRepo");

// ‚úÖ ADMIN_IDS l·∫•y t·ª´ .env
const ADMIN_IDS = (process.env.ADMIN_IDS || "123456789")
  .split(",")
  .map((id) => id.trim())
  .filter((id) => id.length > 0);

/**
 * Check quy·ªÅn admin
 */
async function isAdmin(chatId) {
  if (ADMIN_IDS.includes(String(chatId))) return true;
  try {
    const user = await getUserById(chatId);
    if (user && user.role === "admin") return true;
  } catch (err) {
    console.error("‚ö†Ô∏è isAdmin check error:", err);
  }
  return false;
}

/**
 * X√≥a user theo chatId (ch·ªâ admin ƒë∆∞·ª£c ph√©p)
 */
async function deleteUserFeature(bot, msg, chatId) {
  if (!(await isAdmin(chatId))) {
    return bot.sendMessage(chatId, "‚õî You are not authorized to use this command.");
  }

  const parts = msg.text.trim().split(" ");
  if (parts.length < 2) {
    return bot.sendMessage(chatId, "‚ö†Ô∏è Usage: /deleteuser <chatId>");
  }

  const targetId = Number(parts[1]);
  if (isNaN(targetId)) {
    return bot.sendMessage(chatId, "‚ö†Ô∏è Invalid chatId. Must be a number.");
  }

  try {
    const result = await deleteById(targetId);
    if (result && result.deletedCount > 0) {
      bot.sendMessage(chatId, `‚úÖ User ${targetId} deleted successfully.`);
    } else {
      bot.sendMessage(chatId, `‚ÑπÔ∏è User ${targetId} not found.`);
    }
  } catch (err) {
    console.error("‚ùå Delete user error:", err);
    bot.sendMessage(chatId, "‚ùå Failed to delete user.");
  }
}

/**
 * Tr·∫£ v·ªÅ chatId c·ªßa user (h·ªó tr·ª£ setup ADMIN_IDS)
 */
async function whoAmIFeature(bot, msg, chatId) {
  bot.sendMessage(chatId, `üë§ Your chatId: \`${chatId}\``, { parse_mode: "Markdown" });
}

/**
 * X√≥a nhi·ªÅu user qua CSV
 */
async function deleteUserCsvFeature(bot, msg, chatId) {
  if (!(await isAdmin(chatId))) {
    return bot.sendMessage(chatId, "‚õî You are not authorized.");
  }
  bot.sendMessage(chatId, "üìÇ Please upload a CSV file with <b>chatId</b> column.", { parse_mode: "HTML" });
}

/**
 * Khi nh·∫≠n file CSV t·ª´ admin ‚Üí x·ª≠ l√Ω x√≥a
 */
async function handleCsvUpload(bot, msg) {
  const chatId = msg.chat.id;
  if (!(await isAdmin(chatId))) return;
  if (msg.document.mime_type !== "text/csv") return;

  const fileId = msg.document.file_id;
  const token = process.env.BOT_TOKEN;
  const file = await bot.getFile(fileId);
  const url = `https://api.telegram.org/file/bot${token}/${file.file_path}`;

  try {
    const res = await fetch(url);
    const buffer = Buffer.from(await res.arrayBuffer());
    const tmpPath = `/tmp/users.csv`;
    fs.writeFileSync(tmpPath, buffer);

    let deleted = 0;
    let notFound = 0;

    const rows = [];
    fs.createReadStream(tmpPath)
      .pipe(csv())
      .on("data", (row) => rows.push(row))
      .on("end", async () => {
        for (const row of rows) {
          const targetId = Number(row.chatId);
          if (!isNaN(targetId)) {
            const result = await deleteById(targetId);
            if (result && result.deletedCount > 0) {
              deleted++;
            } else {
              notFound++;
            }
          }
        }

        bot.sendMessage(chatId, `‚úÖ Deleted: ${deleted}, ‚ÑπÔ∏è Not found: ${notFound}`);
      });
  } catch (err) {
    console.error("‚ùå CSV delete error:", err);
    bot.sendMessage(chatId, "‚ùå Failed to process CSV.");
  }
}

/**
 * Export to√†n b·ªô user ra CSV
 */
async function exportUsersFeature(bot, msg, chatId) {
  if (!(await isAdmin(chatId))) {
    return bot.sendMessage(chatId, "‚õî You are not authorized.");
  }

  try {
    const users = await getAllUsers();
    if (!users.length) {
      return bot.sendMessage(chatId, "‚ÑπÔ∏è No users found.");
    }

    const fields = ["id", "username", "first_name", "lang", "points", "coins"];
    const parser = new Parser({ fields });
    const csvData = parser.parse(users);

    const filePath = `/tmp/users_export.csv`;
    fs.writeFileSync(filePath, csvData);

    await bot.sendDocument(chatId, filePath, {}, { filename: "users_export.csv" });
  } catch (err) {
    console.error("‚ùå Export users error:", err);
    bot.sendMessage(chatId, "‚ùå Failed to export users.");
  }
}

module.exports = {
  deleteUserFeature,
  whoAmIFeature,
  deleteUserCsvFeature,
  handleCsvUpload,
  exportUsersFeature,
};
