const { askAI } = require("../ai/ask");
const { npcQuest } = require("../ai/npc");
const { checkAntiCheat } = require("../ai/antiCheat");

module.exports = function setupMenuHandler(bot, i18n) {
bot.on("callback_query", async (callbackQuery) => {
const chatId = callbackQuery.message.chat.id;
const userId = callbackQuery.from.id;
const action = callbackQuery.data;

try {
// üõ°Ô∏è Anti-cheat check
const warning = checkAntiCheat(userId);
if (warning) {
await bot.sendMessage(chatId, warning);
return;
}

switch (action) {
// --- Farm ---
case "farm":
await bot.sendMessage(chatId, "üå± B·∫°n ƒë√£ farm th√†nh c√¥ng! H√£y quay l·∫°i sau ƒë·ªÉ farm ti·∫øp.");
break;

// --- Profile ---
case "profile":
await bot.sendMessage(chatId, "üë§ ƒê√¢y l√† h·ªì s∆° c·ªßa b·∫°n (ƒëang ph√°t tri·ªÉn).");
break;

// --- Shop ---
case "shop":
await bot.sendMessage(chatId, "üõí ƒê√¢y l√† c·ª≠a h√†ng (ch∆∞a m·ªü b√°n).");
break;

// --- Settings ---
case "settings":
await bot.sendMessage(chatId, "‚öôÔ∏è Menu c√†i ƒë·∫∑t ƒëang c·∫≠p nh·∫≠t.");
break;

// --- Help ---
case "help":
await bot.sendMessage(chatId, "‚ÑπÔ∏è H∆∞·ªõng d·∫´n: D√πng menu ƒë·ªÉ farm, xem h·ªì s∆° ho·∫∑c h·ªèi AI.");
break;

// --- AI Ask ---
case "ai_ask":
await bot.sendMessage(chatId, "ü§ñ B·∫°n mu·ªën h·ªèi g√¨ Jipu AI?");
bot.once("message", async (msg) => {
if (!msg.text) return;
const answer = await askAI(msg.from.id, msg.text);
await bot.sendMessage(chatId, answer);
});
break;

// --- NPC ---
case "npc":
const reply = await npcQuest(userId);
await bot.sendMessage(chatId, reply);
break;

default:
await bot.sendMessage(chatId, "‚ùì L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.");
}
} catch (err) {
console.error("‚ùå MenuHandler error:", err);
await bot.sendMessage(chatId, "‚ö†Ô∏è L·ªói h·ªá th·ªëng, th·ª≠ l·∫°i sau.");
}
});
};
