const mongoose = require('mongoose');
const notifyAdmin = require('../utils/notifyAdmin');  // üëà th√™m d√≤ng n√†y

async function connectDB() {
  const uri = process.env.MONGO_URI;
  if (!uri) {
    console.warn('‚ö†Ô∏è MONGO_URI not set; skipping MongoDB connection (using file storage).');
    return;
  }

  const safeUri = uri.replace(/:\/\/(.*?):(.*?)@/, '://$1:****@');

  try {
    await mongoose.connect(uri, {
      dbName: process.env.MONGO_DBNAME || 'jipu_bot',
      serverSelectionTimeoutMS: 20000,
      socketTimeoutMS: 45000,
      maxPoolSize: 10,
      retryWrites: true,
      w: 'majority',
    });
    console.log(`‚úÖ MongoDB connected to ${safeUri}, db: ${process.env.MONGO_DBNAME || 'jipu_bot'}`);
    await notifyAdmin(`‚úÖ Bot ƒë√£ k·∫øt n·ªëi MongoDB th√†nh c√¥ng t·ªõi ${safeUri}`);
  } catch (err) {
    console.error('‚ùå MongoDB connection error:', err.message);
    await notifyAdmin(`‚ùå L·ªói k·∫øt n·ªëi MongoDB: ${err.message}`);
  }

  mongoose.connection.on('disconnected', async () => {
    console.warn('‚ö†Ô∏è MongoDB disconnected. Trying to reconnect...');
    await notifyAdmin('‚ö†Ô∏è MongoDB b·ªã ng·∫Øt k·∫øt n·ªëi, th·ª≠ reconnect sau 5s...');
    setTimeout(connectDB, 5000);
  });

  mongoose.connection.on('reconnected', async () => {
    console.log('üîÑ MongoDB reconnected');
    await notifyAdmin('üîÑ MongoDB ƒë√£ reconnect th√†nh c√¥ng');
  });

  mongoose.connection.on('error', async (err) => {
    console.error('‚ùå MongoDB error:', err.message);
    await notifyAdmin(`‚ùå L·ªói MongoDB: ${err.message}`);
  });
}

module.exports = connectDB;
