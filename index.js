import express from "express";
import bodyParser from "body-parser";
import fetch from "node-fetch";

import { mainMenu } from "./src/utils/menu.js";
import { getText } from "./src/utils/lang.js";
import { findUser, addUser, updateUser } from "./src/utils/db.js";

const app = express();
app.use(bodyParser.json());

const BOT_TOKEN = process.env.BOT_TOKEN;
const WEBHOOK_URL = process.env.WEBHOOK_URL;
const BOT_USERNAME = process.env.BOT_USERNAME;

const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;

// G·ª≠i tin nh·∫Øn t·ªõi Telegram
async function sendMessage(chat_id, text, keyboard = null) {
  const payload = {
    chat_id,
    text,
    reply_markup: keyboard ? { keyboard, resize_keyboard: true } : undefined,
  };
  await fetch(`${TELEGRAM_API}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(payload),
  });
}

// Webhook route (kh√¥ng c√≤n BOT_TOKEN trong path)
app.post("/webhook", async (req, res) => {
  try {
    const msg = req.body.message;
    if (!msg) return res.sendStatus(200);

    const chatId = msg.chat.id;
    const text = msg.text;
    const { id, first_name, username } = msg.from;

    // l·∫•y user t·ª´ DB ho·∫∑c t·∫°o m·ªõi
    let user = findUser(id);
    if (!user) {
      user = addUser({
        user_id: id,
        first_name,
        username,
        lang: "vi",
        balance: 0,
        referral_code: `REF${id}`,
        created_at: new Date().toISOString(),
      });
    }

    const lang = getText(user.lang);

    if (text === "/start") {
      await sendMessage(chatId, lang.start, mainMenu(lang));
    } else if (text === "‚¨ÖÔ∏è") {
      await sendMessage(chatId, lang.start, mainMenu(lang));
    } else if (text === "üåæ Farm") {
      const reward = Math.floor(Math.random() * 10) + 1;
      updateUser(id, { balance: user.balance + reward });
      await sendMessage(chatId, `${lang.farm} +${reward} üí∞`, [[{ text: "‚¨ÖÔ∏è" }]]);
    } else if (text === "üí∞ Balance") {
      await sendMessage(chatId, `${lang.balance}: ${user.balance} üí∞`, [[{ text: "‚¨ÖÔ∏è" }]]);
    } else if (text === "üë• Referral") {
      const refLink = `https://t.me/${BOT_USERNAME}?start=${user.referral_code}`;
      await sendMessage(chatId, `${lang.referral}: ${refLink}`, [[{ text: "‚¨ÖÔ∏è" }]]);
    } else if (text === "‚ùì Help") {
      await sendMessage(chatId, lang.help, [[{ text: "‚¨ÖÔ∏è" }]]);
    } else if (text === "üìú About") {
      await sendMessage(chatId, lang.about, [[{ text: "‚¨ÖÔ∏è" }]]);
    } else if (text === "üåê Language") {
      await sendMessage(chatId, lang.lang_choose, [
        [{ text: "üáªüá≥" }, { text: "üá¨üáß" }],
        [{ text: "‚¨ÖÔ∏è" }],
      ]);
    } else if (text === "üáªüá≥") {
      updateUser(id, { lang: "vi" });
      await sendMessage(chatId, "‚úÖ ƒê√£ ƒë·ªïi ng√¥n ng·ªØ sang Ti·∫øng Vi·ªát", mainMenu(getText("vi")));
    } else if (text === "üá¨üáß") {
      updateUser(id, { lang: "en" });
      await sendMessage(chatId, "‚úÖ Language changed to English", mainMenu(getText("en")));
    }

    res.sendStatus(200);
  } catch (err) {
    console.error("‚ùå Webhook error:", err);
    res.sendStatus(500);
  }
});

// Khi kh·ªüi ƒë·ªông server, t·ª± ƒë·ªông set webhook
app.listen(10000, async () => {
  console.log(`üåê Server ch·∫°y c·ªïng 10000`);
  console.log(`üîó Webhook: ${WEBHOOK_URL}/webhook`);

  try {
    const resp = await fetch(`${TELEGRAM_API}/setWebhook`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ url: `${WEBHOOK_URL}/webhook` }),
    });
    console.log("Set webhook:", await resp.json());
  } catch (e) {
    console.error("‚ùå L·ªói set webhook:", e);
  }
});
